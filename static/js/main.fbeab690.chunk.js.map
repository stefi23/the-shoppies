{"version":3,"sources":["components/MovieCard.js","components/MovieGrid.js","App.js","reportWebVitals.js","index.js"],"names":["MovieCard","movie","buttonEvent","index","nominatedMovies","buttonTitle","className","src","Poster","alt","Title","Year","onClick","e","disabled","find","result","MovieGrid","title","movies","length","map","apiKey","env","API_KEY","App","useState","query","setQuery","setMovies","setNominatedMovies","areNominationsSet","setareNominationsSet","resultError","setResultError","apiErrorMessage","setApiErrorMessage","apiWarningMessage","setApiWarningMessage","useEffect","json","localStorage","getItem","savedNominations","JSON","parse","currentState","stringify","setItem","searchMovies","a","preventDefault","url","fetch","res","data","Response","Map","Search","slice","item","values","Error","console","error","onSubmit","type","autocomplete","name","placeholder","value","onChange","target","i","currentNominations","filter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fbeab690.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction MovieCard({movie, buttonEvent, index, nominatedMovies, buttonTitle}) {\n    return (\n        <div className=\"movie-card-container\">\n            <div className=\"movie-card-container__info\"> \n                {buttonTitle !== \"Nominate\" ? \n                    <p className=\"movie-card-container__info-count\">{index + 1}.</p>\n                    : null }\n                <img className=\"movie-card-container__info__image\" src={movie.Poster} alt={`Poster of ${movie.Title}`}/>\n            </div>\n            <div className=\"movie-card-container__body\">\n                <div className=\"movie-card-container__text\">\n                    <h3 className=\"movie-card-container__text__title\">{movie.Title}</h3> \n                    <p>- {movie.Year} -</p>\n                </div>\n                <button className=\"movie-card-container__text__button\"\n                        onClick={e => buttonEvent(index, e)}\n                        disabled = {buttonTitle === \"Nominate\" ? nominatedMovies.find(result => result.Title === movie.Title) : false}\n                    >\n                    {buttonTitle}\n                </button>\n            </div> \n        </div>\n    )\n}\n\nexport default MovieCard ","import React from \"react\"\nimport MovieCard from \"./MovieCard\"\n\nfunction MovieGrid({title, movies, nominatedMovies, buttonEvent, buttonTitle}) {\n    return (\n        <>\n        <h2 className=\"movie-grid-title\">{buttonTitle === \"Nominations\" ? `${nominatedMovies.length}/5 ${title}`: `${title}` }</h2>\n        <div className=\"movie-grid\">\n         {movies.map((movie, index) => (\n                    <MovieCard \n                        key={index} \n                        index={index} movie={movie} \n                        nominatedMovies={nominatedMovies} \n                        buttonEvent={buttonEvent} \n                        buttonTitle={buttonTitle}/>                 \n                    \n                  ))}\n        </div>\n        </>\n    )\n}\n\nexport default MovieGrid ","import React, { useState, useEffect } from \"react\";\nimport './App.css';\nimport env from \"react-dotenv\";\n// import MovieCard from \"./components/MovieCard\"\nimport MovieGrid from \"./components/MovieGrid\"\n\nconst apiKey = env.API_KEY;\n\nconst App = () => {\n  const [query, setQuery] = useState(\"\")\n  const [movies, setMovies] = useState([])\n  const [nominatedMovies, setNominatedMovies] = useState([])\n  const [areNominationsSet, setareNominationsSet ] = useState(false)\n  const [resultError, setResultError] = useState(false)\n  const [apiErrorMessage, setApiErrorMessage] = useState(\"\")\n  const [apiWarningMessage, setApiWarningMessage] = useState(\"\")\n  \n\nuseEffect(() => {\n  const json = localStorage.getItem(\"nominatedMovies\");\n  const savedNominations = JSON.parse(json);\n  if (savedNominations) {\n    setNominatedMovies(savedNominations);\n  }\n}, []);\n  \nuseEffect(() => {\n   setareNominationsSet(currentState => nominatedMovies.length === 5)\n   const json = JSON.stringify(nominatedMovies);\n  localStorage.setItem(\"nominatedMovies\", json);\n  }, [nominatedMovies]);\n\n\n  const searchMovies = async (e) => {\n    e.preventDefault();\n    setApiWarningMessage(\"\")\n    setApiErrorMessage(\"\")\n  \n    setResultError(false)\n    const url = `http://www.omdbapi.com/?apikey=${apiKey}&s=${query}&type=movie`\n\n      try {\n        const res = await fetch(url);\n        const data = await res.json();\n        if(data.Response === \"True\") {\n        const movies = [...new Map(data.Search.slice(0, 5).map(item => [item[\"imdbID\"], item])).values()]\n          setMovies( [...movies])\n          setQuery(\"\");\n        } else {\n          setResultError(true)\n          if(data.Error === \"Too many results.\") {\n            setApiWarningMessage(data.Error)\n          } else if(data.Error  === \"Movie not found!\"){\n            setApiErrorMessage(data.Error)\n          }\n        }\n      } catch (err) {\n        console.error(err);\n      }\n\n  };\n\n  const addNomination = (index, e) => {\n    setNominatedMovies(nominatedMovies => [...nominatedMovies, movies[index]])\n    setMovies(() => [])\n  }\n  \n  const removeNomination = (i, e) => {\n     setNominatedMovies(currentNominations => currentNominations.filter((item, index) => index !== i));\n\n  }\n\n  return (\n    <div className=\"App wrapper\">\n      <h1 className=\"wrapper__title\">The Shoppies</h1>\n      <p className=\"wrapper__text\">Time to choose your 5 favorite movies for the Shoppies nominations üçø</p>\n      <form className=\"form wrapper__form\" onSubmit={searchMovies}>\n      <input\n          type=\"text\"\n          disabled = {areNominationsSet}\n          autocomplete=\"off\"\n          className=\"form wrapper__form__input\"\n          name=\"query\"\n          placeholder=\"\"\n          value={query}\n          onChange={e => setQuery(e.target.value)}\n          // onKeyDown={e => e.key === \"Backspace\" ? setMovies(() => []) : null }\n        />\n        <button className=\"search-button\" type=\"submit\" disabled = {areNominationsSet || query === \"\"}>Search</button>\n        </form>\n      \n      { areNominationsSet ? \n      \n      <div className=\"wrapper__success-message\">üé• You have nominated 5 films. üèÜ</div> \n          \n          : null }\n          \n         { resultError && apiWarningMessage ?  \n              <div className=\"wrapper__warning-message\">‚ö†Ô∏è {apiWarningMessage} Try to narrow done your search by using more characters.</div>  \n              \n              : resultError && apiErrorMessage ? \n              <div className=\"wrapper__error-message\">‚ùó We're sorry. {apiErrorMessage}</div>  :\n             \n              <div>\n                {!areNominationsSet && movies?.length > 0 ?\n                \n                  <MovieGrid \n                      title=\"Search results:\" \n                      movies={movies} \n                      nominatedMovies={nominatedMovies} \n                      buttonEvent={addNomination} \n                      buttonTitle=\"Nominate\"\n                  />             \n                : null}\n                  \n              </div>\n             \n               }\n       \n            <div>\n                {nominatedMovies.length > 0 ? \n                  <MovieGrid \n                    title=\"Nominations\" \n                    movies={nominatedMovies} \n                    nominatedMovies={nominatedMovies} \n                    buttonEvent={removeNomination} \n                    buttonTitle=\"Remove\"\n                  />  \n  \n                : null}\n          </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}